server:
  port: 18000
spring:
  application:
    name: gateway
  #开启热部署
  devtools:
    restart:
      enabled: false
  #网关配置
  cloud:
    gateway:
      discovery:
        locator:
          # 配合自定义路由谓词工厂使用 false，需禁止gateway通过服务发现组件转发请求到其他的微服务
          enabled: false  # 让gateway通过服务发现组件找到其他的微服务，从而自动转发请求，可配合nacos、Eureka等

      # 通过时间匹配 after_route
#      routes: # Route（路由）
#        - id: time_route
#          uri: http://127.0.0.1:18001
#          predicates:  # Predicate（谓词）
#            - After=2020-11-01T06:06:06+08:00[Asia/Shanghai]  # 设置只有在2020年11月02日才会转发到我的网站
##            - Between=2018-01-20T06:06:06+08:00[Asia/Shanghai], 2019-01-20T06:06:06+08:00[Asia/Shanghai]  # 时间范围内能转发 after_route

# 命令行输入:
# curl http://localhost:18000/v1/hello

      # 通过cokkie匹配
#      routes:
#        - id: cookie_route
#          uri: http://127.0.0.1:18001
#          predicates:
#            - Cookie=ityouknow,kee.e

# 命令行输入:
# curl http://localhost:18000/v1/hello --cookie "ityouknow=kee.e"

      # 通过 header 匹配
#      routes:
#        - id: header_route
#          uri: http://127.0.0.1:18001
#          predicates:
#            - Header=X-Request-Id, \d+

# 命令行输入:
# curl http://localhost:18000/v1/hello  -H "X-Request-Id:666666"

      # 通过 Host 匹配
#      routes:
#        - id: host_route
#          uri: http://127.0.0.1:18001
#          predicates:
#            - Host=**.ityouknow.com

# 命令行输入:
# curl http://localhost:18000/v1/hello  -H "Host: www.ityouknow.com"
# curl http://localhost:18000/v1/hello  -H "Host: md.ityouknow.com"

      # 通过请求方式匹配
#      routes:
#        - id: method_route
#          uri: http://127.0.0.1:18001
#          predicates:
#            - Method=GET   # 通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由

# curl 默认是以 GET 的方式去请求
#  curl http://localhost:18000/v1/hello
# curl 默认是以 GET 的方式去请求
#  curl -X POST http://localhost:18000/v1/hello

      # 通过请求路径匹配
#      routes:
#        - id: host_route
#          uri: http://127.0.0.1:18001/v1/hello
#          predicates:
#            - Path=/v1/{segment}   # Path Route Predicate 接收一个匹配路径的参数来判断是否走路由

#命令行输入:
#  curl http://localhost:18000/v1/hello  # 通过
#  curl http://localhost:18000/v1/xx   # 不通过
#  curl http://localhost:18000/boo/xx  # 不通过

      # 通过请求参数匹配
#      routes:
#        - id: query_route
#          uri: http://127.0.0.1:18001/v1/hello
#          predicates:
##            - Query=smile  # 支持传入两个参数(属性名=属性值)，属性值可以是正则表达式
#            - Query=keep, pu. # 当请求中包含 keep 属性并且参数值是以 pu 开头的长度为三位的字符串才会进行匹配和路由

# 命令行输入:
#  curl http://localhost:18000/v1/hello?smile=x
#  curl http://localhost:18000/v1/hello?keep=pub

      # 通过请求 ip 地址匹配
#      routes:
#        - id: remoteaddr_route
#          uri: http://127.0.0.1:18001
#          predicates:
#            - RemoteAddr=192.168.2.221/24  # Predicate 也支持通过设置某个 ip 区间号段的请求才会路由

# 命令行输入:
#  curl http://192.168.2.221:18000/v1/hello   # 测试使用本机ip访问

      # 组合使用
#      routes:
#        - id: host_foo_path_headers_to_httpbin
#        uri: http://127.0.0.1:18001
#        predicates:  # 各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配
#          - Host=**.foo.org
#          - Path=/headers
#          - Method=GET
#          - Header=X-Request-Id, \d+
#          - Query=foo, ba.
#          - Query=baz
#          - Cookie=chocolate, ch.p
#          - After=2018-01-20T06:06:06+08:00[Asia/Shanghai]

# 一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发


# ****************配合（eureka、nacos）服务管理请求*******************

      # 默认的转发规则 ,不太灵活
#      routes:
#        - id: gateway-web-a  # 唯一标识，通常使用服务id
#          uri: lb://gateway-web-a  # 目标URL，lb代表从注册中心获取服务，lb是Load Balance的缩写
#          predicates:
#            - Method=GET

# 命令行输入:
#  curl http://localhost:18000/v1/hello

      # 自定义转发路由 根据不同版本的访问路径转发到不同版本的微服务上
#      routes:
#        - id: gateway-web-a  # 唯一标识，通常使用服务id
#          uri: lb://gateway-web-a  # 目标URL，lb代表从注册中心获取服务，lb是Load Balance的缩写
#          predicates:
#            - Path=/gateway/cloud/v1/user-center/**  # 匹配转发路径
#          filters:
#            - StripPrefix=4  # 从第几级开始转发，数字从0开始

# 命令行输入:
#  curl http://localhost:18000/gateway/cloud/v1/user-center/v1/hello

      # 路由配置的两种形式-路由到指定的URL(通配，使用通配符/**进行匹配)
#      routes:
#        - id: test_route  # 唯一标识，通常使用服务id
#          uri: http://127.0.0.1:18001  # url
#          predicates:
#            - Path=/**  # 使用通配符匹配

# 命令行输入:
#  curl http://localhost:18000/v1/hello

      # 路由配置的两种形式-路由到指定的URL(精确匹配，配置具体的接口路径即可)
#      routes:
#        - id: test_route  # 唯一标识，通常使用服务id
#          uri: http://127.0.0.1:18001/v1/hello  # path
#          predicates:
#            - Path=/v1/hello  # 指定具体的路径进行匹配

# 命令行输入:
#  curl http://localhost:18000/v1/hello


      # 路由配置的两种形式-路由到指定的微服务(通配，使用通配符/**进行匹配)
#      routes:
#        - id: gateway-web-a  # 唯一标识，通常使用服务id
#          uri: lb://gateway-web-a  # 目标URL，lb代表从注册中心获取服务，lb是Load Balance的缩写
#          predicates:
#            - Path=/**  # 使用通配符匹配

# 命令行输入:
#  curl http://localhost:18000/v1/hello

      # 路由配置的两种形式-路由到指定的微服务(精确匹配，配置具体的接口路径即可)
#      routes:
#        - id: gateway-web-a  # 唯一标识，通常使用服务id
#          uri: lb://gateway-web-a/v1/hello  # path
#          predicates:
#            - Path=/v1/hello  # 指定具体的路径进行匹配

# 命令行输入:
#  curl http://localhost:18000/v1/hello


      # 自定义路由谓词工厂  如有某个服务限制用户只允许在09:00 - 17:00这个时间段内才可以访问
      # 自定义过滤器-记录访问日志
      routes:
        - id: gateway-web-a  # 唯一标识，通常使用服务id
          uri: lb://gateway-web-a  # 目标URL，lb代表从注册中心获取服务
          predicates:
            # 注意名称必须为路由谓词工厂类名的前缀，参数为允许访问的时间段
            - TimeBetween=上午9:00,下午5:00   # 自定义路由谓词工厂  如有某个服务限制用户只允许在09:00 - 17:00这个时间段内才可以访问
          filters:
            # 名称必须为过滤器工厂类名的前缀，并且参数只能有两个，因为NameValueConfig里只定义了两个属性
            - PreLog=testName,testValue   # 自定义过滤器-记录访问日志

# 命令行输入:
#  curl http://localhost:18000/v1/hello



# 服务管理
eureka:
  client:
    service-url:
      defaultZone: http://localhost:16000/eureka/

# actuator相关配置
management:
  endpoints:
    web:
      exposure:
        # 暴露所有监控端点
        include: '*'
  endpoint:
    health:
      # 总是显示健康检测详情
      show-details: always